@mixin respond-to($media) {
  @if $media==handhelds {
    @media only screen and (max-width: 575px) {
      @content;
    }
  }
  @else if $media==wide-handhelds {
    @media only screen and (min-width: 576px) and (max-width: 767px) {
      @content;
    }
  }
  @else if $media==tablets {
    @media only screen and (min-width: 768px) and (max-width: 991px) {
      @content;
    }
  }
  @else if $media==wide-tablets {
    @media only screen and (min-width: 992px) and (max-width: 1200px) {
      @content;
    }
  }
  @else if $media==medium-display{
    @media only screen and (min-width: 1201px) and (max-width: 1366px) {
      @content;
    }
  }
  @else if $media==wide-display {
    @media only screen and (min-width: 1367px) and (max-width: 1440px) {
      @content;
    }
  }

  @else if $media==large-display {
    @media only screen and (min-width: 1441px) and (max-width: 1680px) {
      @content;
    }
  }

  @else if $media== extra-large-display {
    @media (min-width: 1681px) {
      @content;
    }
  }

  @else if $media==tabdisp {
    @media only screen and (min-width: 992px) and (max-width: 1366px) {
      @content;
    }
  }

  @else if $media==allwd {
    @media only screen and (min-width: 992px) and (max-width: 1570px) {
      @content;
    }
  }

  @else if $media==allwide {
    @media (min-width: 992px)  {
      @content;
    }
  }
  @else if $media==allsmall {
    @media (max-width: 991px)  {
      @content;
    }
  }

  @else if $media==allmobile {
    @media (max-width: 767px)  {
      @content;
    }
  }
}

@mixin placeholder($color: $input-color-placeholder) {
  // Firefox
  &::-moz-placeholder {
    color: $color;
    opacity: 1; // Override Firefox's unusual default opacity; see https://github.com/twbs/bootstrap/pull/11526
  }
  &:-ms-input-placeholder { color: $color; } // Internet Explorer 10+
  &::-webkit-input-placeholder  { color: $color; } // Safari and Chrome
}

$group-size: 10;

@mixin auto-transition {
  @for $i from 6 through $group-size {
    &:nth-child(#{$i}) {
      @include transition(all 1s ease-out #{($i - 5) * .2}s);
    }
  }
}

/**
 * Convert font-size from px to rem with px fallback
 *
 * @param $size - the value in pixel you want to convert
 *
 * e.g. p {@include fontSize(12px);}
 *
 */

$browser-context: 16; // Default

@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em
}

// Function for converting a px based font-size to rem.
@function calculateRem($size) {
  $remSize: $size / 16px;
  //Default font size on html _element is 100%, equivalent to 16px;
  @return #{$remSize}rem;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin fontSize($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

@mixin lineHeight($size){
  line-height: calculateRem($size);
}

